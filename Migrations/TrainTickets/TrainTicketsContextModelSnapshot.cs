// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainTickets.Data;

#nullable disable

namespace TrainTickets.Migrations.TrainTickets
{
    [DbContext(typeof(TrainTicketsContext))]
    partial class TrainTicketsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TrainTickets.Models.Coach", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CoachNumber")
                        .HasColumnType("int");

                    b.Property<int>("PriceTenge")
                        .HasColumnType("int");

                    b.Property<int>("TrainID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TrainID");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("TrainTickets.Models.Place", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CoachID")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("PlaceNumber")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CoachID");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("TrainTickets.Models.Station", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("TrainTickets.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestTrainStationID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginTrainStationID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DestTrainStationID");

                    b.HasIndex("OriginTrainStationID");

                    b.HasIndex("PlaceID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("TrainTickets.Models.Train", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Train");
                });

            modelBuilder.Entity("TrainTickets.Models.TrainStation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("ArrivalAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("StationID")
                        .HasColumnType("int");

                    b.Property<int>("TrainID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StationID");

                    b.HasIndex("TrainID");

                    b.ToTable("TrainStation");
                });

            modelBuilder.Entity("TrainTickets.Models.Coach", b =>
                {
                    b.HasOne("TrainTickets.Models.Train", "Train")
                        .WithMany("Coaches")
                        .HasForeignKey("TrainID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Train");
                });

            modelBuilder.Entity("TrainTickets.Models.Place", b =>
                {
                    b.HasOne("TrainTickets.Models.Coach", "Coach")
                        .WithMany("Places")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("TrainTickets.Models.Ticket", b =>
                {
                    b.HasOne("TrainTickets.Models.TrainStation", "DestTrainStation")
                        .WithMany()
                        .HasForeignKey("DestTrainStationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TrainTickets.Models.TrainStation", "OriginTrainStation")
                        .WithMany()
                        .HasForeignKey("OriginTrainStationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TrainTickets.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestTrainStation");

                    b.Navigation("OriginTrainStation");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TrainTickets.Models.TrainStation", b =>
                {
                    b.HasOne("TrainTickets.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainTickets.Models.Train", "Train")
                        .WithMany("TrainStations")
                        .HasForeignKey("TrainID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("TrainTickets.Models.Coach", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("TrainTickets.Models.Train", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("TrainStations");
                });
#pragma warning restore 612, 618
        }
    }
}
